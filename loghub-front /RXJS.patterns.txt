//  Async stream to generate random numbers ever 0.2 sec
 
  <div>SSS: {{ sss | async | json }}</div>

  sss: Observable<number> = interval(200).pipe(
            scan((a, c) => [...a, c], []),
            map(r => r[Math.floor(Math.random() * r.length)]),
            distinctUntilChanged()
        );


// Async sync with timer pproducer - ever second
   <div>Time: {{ time | async }}</div>

    time = new Observable<string>((observer: Observer<string>) => {
        setInterval(() => observer.next(new Date().toString()), 1000);
    });

// Async sync to get data from REST http
   <li *ngFor="let log of observLogs | async" >{{log.record}} </li>


  //--------------------------------   
   getSrvStream(limit?: number): Observable<Array<Log>> {
        this.logs = []; // initialize array

        // anonymous Observable class
        return Observable.create((observer) => { 
            let url = this.url + limit;
            let eventSource = new EventSource(url);

            // update array with received message
            eventSource.onmessage = (event) => { 
                let json = JSON.parse(event.data);
                this.logs.push(new Log(json['key'], json['level'], json['record']));
                observer.next(this.logs);
            };

            eventSource.onerror = (err) => {
                // 0 — connecting
                // 1 — open
                // 2 — closed
                switch (eventSource.readyState) {
                    case 0:
                        eventSource.close();
                        observer.complete();
                        let s = 'Recived ' + this.logs.length + ' messages';
                        break;
                    default:
                        observer.error('EventSource error: ' + err);
                        console.log('EventSource error: ', err);
                }

            }
        });
   }
   //--------------------------------
